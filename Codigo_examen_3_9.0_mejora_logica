import customtkinter
import re
from tkinter import *
import mysql.connector
from tkinter import messagebox
from tkinter import StringVar
from tkinter import ttk
customtkinter.set_default_color_theme("green")
from customtkinter import CTk, CTkFrame, CTkLabel, CTkButton, CTkEntry


bd = mysql.connector.connect(
    host="localhost",
    user="root",
    password="",
    database="calificaciones",
    buffered=True
)
ventana_abierta = False

def mostrar_ventana_dialogo(titulo, mensaje):
    global ventana_abierta
    if ventana_abierta==False:
        ventana_abierta = True
        messagebox.showinfo(titulo, mensaje)
        ventana_abierta = False
    else:
        return

def mostrar_ventana_pregunta(titulo, mensaje):
    global ventana_abierta
    if ventana_abierta==False:
        ventana_abierta = True
        siono=messagebox.askyesno(titulo, mensaje)
        ventana_abierta=False
        if siono:
            return True
    else:
        return
        
def limitar_entry_contra(entrada, limit):
    def limitar(event):
        texto = entrada.get()
        if len(texto) >= limit and event.keysym != 'BackSpace' or ventana_abierta == True:
            return "break"
    entrada.bind("<Key>", limitar)


def limitar_entry(entrada, limit):
    def limitar(event):
        texto = entrada.get()
        if len(texto) >= limit and event.keysym != 'BackSpace' or ventana_abierta == True:
            return "break"
        if event.keysym == 'BackSpace':
            return
        if event.char.isalpha() and len(texto) < limit:
            if event.state == 0:
                nueva_tecla = event.char.upper()
            else:
                nueva_tecla = event.char.lower()
            entrada.insert('end', nueva_tecla)
            return "break"
        else:
            return "break"
    entrada.bind("<Key>", limitar)


def limitar_entry_num(entrada, limit):
    def limitar(event):
        texto = entrada.get()
        if len(texto) >= limit and event.keysym != 'BackSpace' or ventana_abierta == True:
            return "break"
        if event.char.isdigit() and len(texto) < limit or event.keysym == 'BackSpace':
            return
        else:
            return "break"
    entrada.bind("<Key>", limitar)
    
def eliminar():
    confir=mostrar_ventana_pregunta("Eliminar alumno","¿Seguro que desea eliminar su cuenta?")
    if confir:
        cursor=bd.cursor()
        for x in range(1,5):
            cursor.execute("DELETE FROM `materias` WHERE `materias`.`unidad` = %s AND `materias`.`alumno` = %s;",(x,alumno.get()))
        bd.commit()
        cursor.close()
        ventana.withdraw()
        messagebox.showinfo(title="Correcto",message="Eliminacion exitosa")
        paz()
    else:
        return
    
    
def actualizar():
    
    if not Unidad.get() or not Programacion.get() or not Conta.get() or not Quimica.get() or not Algebra.get() or not Calculo.get() or not Probabilidad.get() or not Ingles.get():
        mostrar_ventana_dialogo("Vacio?","Los campos no pueden estar vacios")
        return

    try:
        V_unidad=int(Unidad.get())
    except ValueError as error:
        mostrar_ventana_dialogo("Error de datos","Los datos ingresados en unidad deben de ser numeros\n\nError: "+str(error))
        Unidad.delete(0,END)
        return
    if V_unidad>=1 and V_unidad<=5:
            pass
    else:
        mostrar_ventana_dialogo("Unidad no valida","La unidad "+str(V_unidad)+" no es una unidad validad\nsolo se aceptan unidades del 1 al 4")
        return
    
    try:
        V_programacion=int(Programacion.get())
    except ValueError as error:
        mostrar_ventana_dialogo("Error de datos","Los datos ingresados en programacion deben ser numeros")
        Programacion.delete(0,END)
        return
    if V_programacion>=0 and V_programacion<=100:
        pass
    else:
        mostrar_ventana_dialogo("¿Mayor calificacion?","error-materia: Programacion \nIngrese una calificacion del 0 al 100")
        return
    
    try:
        V_conta=int(Conta.get())
    except ValueError:
        mostrar_ventana_dialogo("Error de datos","Los datos ingresados en Contabilidad deben ser numeros")
        Conta.delete(0,END)
        return
    if V_conta>=0 and V_conta<=100:
        pass
    else:
        mostrar_ventana_dialogo("¿Mayor calificacion?","error-materia: Contabilidad \nIngrese una calificacion del 0 al 100")
        return
    
    try:
        V_quimi=int(Quimica.get())
    except ValueError:
        mostrar_ventana_dialogo("Error de datos","Los datos ingresados en Quimica deben ser numeros")
        Quimica.delete(0,END)
        return
    if V_quimi>=0 and V_quimi<=100:
        pass
    else:
        mostrar_ventana_dialogo("¿Mayor calificacion?","error-materia: Quimica \nIngrese una calificacion del 0 al 100")
        return


    try:
        V_alge=int(Algebra.get())
    except ValueError:
        mostrar_ventana_dialogo("Error de datos","Los datos ingresados en Algebra deben ser numeros")
        Algebra.delete(0,END)
        return
    if V_alge>=0 and V_alge<=100:
        pass
    else:
        mostrar_ventana_dialogo("¿Mayor calificacion?","error-materia: Algebra \nIngrese una calificacion del 0 al 100")
        return  

    try:
        V_calu=int(Calculo.get())
    except ValueError:
        mostrar_ventana_dialogo("Error de datos","Los datos ingresados en Calculo deben ser numeros")
        Calculo.delete(0,END)
        return
    if V_calu>=0 and V_calu<=100:
        pass
    else:
        mostrar_ventana_dialogo("¿Mayor calificacion?","error-materia: Calculo \nIngrese una calificacion del 0 al 100")
        return  

    try:
        V_probabilidad=int(Probabilidad.get())
    except ValueError:
        mostrar_ventana_dialogo("Error de datos","Los datos ingresados en Probabilidad deben ser numeros")
        Probabilidad.delete(0,END)
        return
    if V_probabilidad>=0 and V_probabilidad<=100:
        pass
    else:
        mostrar_ventana_dialogo("¿Mayor calificacion?","error-materia: Probabilidad \nIngrese una calificacion del 0 al 100")
        return  

    try:
        V_ingles=int(Ingles.get())
    except ValueError:
        mostrar_ventana_dialogo("Error de datos","Los datos ingresados en Inglés deben ser numeros")
        Ingles.delete(0,END)
        return
    if V_ingles>=0 and V_ingles<=100:
        pass
    else:
        mostrar_ventana_dialogo("¿Mayor calificacion?","error-materia: Inglés \nIngrese una calificacion del 0 al 100")
        return
    
    confirmar = mostrar_ventana_pregunta("Confirmar Actualización", "¿Está seguro de querer actualizar sus calificaciones?")
    
    if confirmar:
        

        alumno=alumno_s
        a=bd.cursor()
        proba=(V_alge+V_calu+V_conta+V_ingles+V_probabilidad+V_programacion+V_quimi)/7
        valores=(V_programacion, V_conta, V_quimi, V_alge, V_calu, V_probabilidad, V_ingles, proba, V_unidad, alumno)
        sql = "UPDATE `materias` SET `programacion` = %s, `contabilidad` = %s, `quimica` = %s, `algebra` = %s, `calculo` = %s, `probabilidad` = %s, `ingles` = %s, `promedio` = %s WHERE `materias`.`unidad` = %s AND `materias`.`alumno` = %s"
        a.execute(sql,valores)
        bd.commit()
        a.close()
        ventana.withdraw()
        llamar()
        

class datos(CTkFrame):
    def __init__(self, master: None):
        super().__init__(master, width=725, height=150)
        self.master=master
        self.pack()
        self.ventana()
        
    def ventana(self):
        ven = ttk.Frame(self)
        ven.place(x=0, y=0)
        
        tabla = ttk.Treeview(ven)
        
        tabla["columns"] = ('Unidad', 'Programacion orientada a objetos', 'Contabilidad financiera', 'Quimica', 'Algebra lineal', 'Calculo integral', 'Probabilidad y estadistica', 'Ingles', 'Promedio')
        tabla.column('#0', width=0)
        tabla.column('Unidad', width=100)
        tabla.column('Programacion orientada a objetos', width=100)
        tabla.column('Contabilidad financiera', width=100)
        tabla.column('Quimica', width=100)
        tabla.column('Algebra lineal', width=100)
        tabla.column('Calculo integral', width=100)
        tabla.column('Probabilidad y estadistica', width=100)
        tabla.column('Ingles', width=100)
        tabla.column('Promedio', width=100)
        
        tabla.heading('#0', text='')
        tabla.heading('Unidad', text='Unidad')
        tabla.heading('Programacion orientada a objetos', text='Programacion')
        tabla.heading('Contabilidad financiera', text='Contabilidad')
        tabla.heading('Quimica', text='Quimica')
        tabla.heading('Algebra lineal', text='Algebra')
        tabla.heading('Calculo integral', text='Calculo')
        tabla.heading('Probabilidad y estadistica', text='probabilidad')
        tabla.heading('Ingles', text='Ingles')
        tabla.heading('Promedio', text='Promedio')

        seleccionar = "select * from materias where alumno = %s and contraseña = %s"
        ta = bd.cursor()
        ta.execute(seleccionar, (alumno_s, contraseña_s,))
        resultado = ta.fetchall()

        for materias in resultado:
            if not isinstance(materias, tuple):
                continue
            identificador = f"{materias[0]}_{materias[1]}"
            tabla.insert(parent='', index='end', iid=identificador, values=(materias[0], materias[3], materias[4], materias[5], materias[6], materias[7], materias[8], materias[9], materias[10]), tags="CustomCell")
        ta.close()
        
        tabla.pack()
        
        style = ttk.Style(ven)
        style.map("Treeview",background=[('selected', 'RosyBrown3')],foreground=[('selected', 'white')])
        
        
def llamar():
    customtkinter.set_appearance_mode("light")
    def cerrar_sesion():
        conf=mostrar_ventana_pregunta("Confirmar","Seguro que desea cerrar sesión?")
        if conf:
            ventana.withdraw()
            paz()
        else:
            return
    def promedio_final():
        prom=bd.cursor()
        y=0
        for x in range(1,5):
            prom.execute("SELECT `promedio` FROM `materias` WHERE unidad = %s AND alumno = %s AND contraseña = %s", (x, alumno_s, contraseña_s))
            y = int(prom.fetchone()[0]) + y
        promfinal=y/4
        prom.close()
        mostrar_ventana_dialogo("Promedio final","Su promedio final del semestre es "+str(promfinal))
    global ventana
    global Unidad
    global Programacion
    global Conta
    global Quimica
    global Algebra
    global Calculo
    global Probabilidad
    global Ingles

    ventana = CTk()
    ventana.config(background="RosyBrown1")
    ventana.geometry("1250x245")
    ventana.resizable(0,0)
    ventana.title("Datos de usuario")

    label1 = CTkLabel(ventana, text="Unidad:",bg_color="RosyBrown1")
    label1.place(y=0, x=750)

    Unidad = CTkEntry(ventana,bg_color="RosyBrown1")
    Unidad.place(y=0, x=850)
    limitar_entry_num(Unidad,1)
    
    label2 = CTkLabel(ventana, text="Programacion:",bg_color="RosyBrown1")
    label2.place(y=30, x=750)

    Programacion = CTkEntry(ventana,bg_color="RosyBrown1")
    Programacion.place(y=30, x=850)
    limitar_entry_num(Programacion,3)
    
    label3 = CTkLabel(ventana, text="Contabilidad:",bg_color="RosyBrown1")
    label3.place(y=60, x=750)

    Conta = CTkEntry(ventana,bg_color="RosyBrown1")
    Conta.place(y=60, x=850)
    limitar_entry_num(Conta,3)
    
    label4 = CTkLabel(ventana, text="Quimica:",bg_color="RosyBrown1")
    label4.place(y=90, x=750)

    Quimica = CTkEntry(ventana,bg_color="RosyBrown1")
    Quimica.place(y=90, x=850)
    limitar_entry_num(Quimica,3)
    
    label5 = CTkLabel(ventana, text="Algebra:",bg_color="RosyBrown1")
    label5.place(y=0, x=1000)

    Algebra = CTkEntry(ventana,bg_color="RosyBrown1")
    Algebra.place(y=0, x=1100)
    limitar_entry_num(Algebra,3)
    
    label6 = CTkLabel(ventana, text="Calculo:",bg_color="RosyBrown1")
    label6.place(y=30, x=1000)

    Calculo = CTkEntry(ventana,bg_color="RosyBrown1")
    Calculo.place(y=30, x=1100)
    limitar_entry_num(Calculo,3)
    
    label7 = CTkLabel(ventana, text="Probabilidad:",bg_color="RosyBrown1")
    label7.place(y=60, x=1000)

    Probabilidad = CTkEntry(ventana,bg_color="RosyBrown1")
    Probabilidad.place(y=60, x=1100)
    limitar_entry_num(Probabilidad,3)
    
    label8 = CTkLabel(ventana, text="Inglés:",bg_color="RosyBrown1")
    label8.place(y=90, x=1000)

    Ingles = CTkEntry(ventana,bg_color="RosyBrown1")
    Ingles.place(y=90, x=1100)
    limitar_entry_num(Ingles,3)
    
    app = datos(ventana)
    app.place(x=10, y=10)

    boton1 = CTkButton(ventana, text="Actualizar",command=actualizar, width=10,bg_color="RosyBrown1",fg_color=("#DB3E39","#821D1A"))
    boton1.place(x=200, y=200)

    boton2 = CTkButton(ventana, text="Salir", width=10,command=cerrar_sesion,bg_color="RosyBrown1",fg_color=("#DB3E39","#821D1A"))
    boton2.place(x=800, y=200)
    
    boton3 = CTkButton(ventana,text="Eliminar",command=eliminar,width=10,bg_color="RosyBrown1",fg_color=("#DB3E39","#821D1A"))
    boton3.place(x=600,y=200)
    
    boton4 = CTkButton(ventana,text="Promedio final",command=promedio_final, width=10,bg_color="RosyBrown1",fg_color=("#DB3E39","#821D1A"))
    boton4.place(x=400,y=200)
    
    ventana.mainloop()

def inicio():
  if ventana_abierta:
      return
  customtkinter.set_appearance_mode("dark")
  def iniciar():

    global alumno_s
    global contraseña_s
    alumno_s = alumno.get()
    contraseña_s = contraseña.get()
    identificar = "SELECT * FROM materias WHERE alumno = %s"
    
    cursor = bd.cursor()
    cursor.execute(identificar, (alumno_s,))
    resultado = cursor.fetchone()
    if ventana_abierta:
        return
    
    if alumno_s!="" or contraseña_s!="":
        if resultado is not None:
            pass
        else:
            mostrar_ventana_dialogo("¿Alumno?","El alumno al que intenta acceder no esta registrado o fue eliminado")
            alumno.delete(0,END)
            contraseña.delete(0,END)
            return
        if resultado[2] == contraseña_s and resultado[1] == alumno_s:
            
            cursor.close()
            inicio_sesion.withdraw()
            llamar()
            
        else:
            mostrar_ventana_dialogo("Contraseña incorrecta","La contraseña es incorrecta")
            contraseña.delete(0,END)
            return
            
    else:
      
      mostrar_ventana_dialogo("Datos incompletos", "No pueden quedar campos vacios")
        
  def regreso():
    if ventana_abierta:
        return
    inicio_sesion.withdraw()
    paz()

  ventana.withdraw()


  inicio_sesion=CTk()
  inicio_sesion.config(background="RosyBrown2")
  inicio_sesion.title("Inicio de sesión")
  inicio_sesion.geometry("400x400")
  inicio_sesion.resizable(0,0)
  
  global alumno
  global contraseña
  
  text0_2=CTkLabel(inicio_sesion,text="",bg_color="RosyBrown2",text_color="Black")
  text0_2.pack(pady="10")
  
  text1=CTkLabel(inicio_sesion,text="Ingrese su nombre",bg_color="RosyBrown2",text_color="Black")
  text1.pack()
    
  alumno=CTkEntry(inicio_sesion,bg_color="RosyBrown2")
  alumno.pack()
  limitar_entry(alumno,28)
  
  text0=CTkLabel(inicio_sesion,text="",bg_color="RosyBrown2")
  text0.pack(pady="15")
  
  text2=CTkLabel(inicio_sesion,text="Ingrese su contraseña",bg_color="RosyBrown2",text_color="Black")
  text2.pack()
  
  contraseña=CTkEntry(inicio_sesion,show="*",bg_color="RosyBrown2")
  contraseña.pack()
  limitar_entry_contra(contraseña,30)

  text0_1=CTkLabel(inicio_sesion,text="",bg_color="RosyBrown2")
  text0_1.pack(pady="15")
  
  boton=CTkButton(inicio_sesion,text="Continuar",command=iniciar,bg_color="RosyBrown2",fg_color=("#DB3E39","#821D1A"))
  boton.pack(pady="1")
  
  boton2=CTkButton(inicio_sesion,text="Regresar",command=regreso,bg_color="RosyBrown2",fg_color=("#DB3E39","#821D1A"))
  boton2.pack(pady="10")

  inicio_sesion.mainloop()


def registro():
    customtkinter.set_appearance_mode("dark")
    def registrar_a():
        if ventana_abierta:
            return
        if not alu.get().isalpha():
            mostrar_ventana_dialogo("Error de datos","El nombre del alumnno no puede contener carcteres especiales o numeros")
            alu.delete(0,END)
            con.delete(0,END)
            return
        if alu.get()=="" or con.get()=="":
      
            mostrar_ventana_dialogo("Datos incompletos", "No pueden quedar campos vacios")
     
        else:
            if alu.get()=="Kelly":
                mostrar_ventana_dialogo("ALERTA KELLY","Eres Kelly fuera de aqui")
                alu.delete(0,END)
                con.delete(0,END)
                return
            registrar = bd.cursor()
            registrar.execute("SELECT * FROM materias WHERE alumno = %s", (str(alu.get()),))
            record = registrar.fetchall()
            if any(row[1] == alu.get() for row in record):
                mostrar_ventana_dialogo("Alumno duplicado", "El alumno que usted desea registrar ya está registrado")
                alu.delete(0, END)
                con.delete(0, END)
                return
            else:
                pass
            regist="insert into materias (alumno,contraseña,unidad) values(%s,%s,%s)"
            for x in range(1,5):
                rar=(str(alu.get()),str(con.get()), x)
                registrar.execute(regist,rar)
            
            mostrar_ventana_dialogo("Estatus","Alumno registrado")
            
            bd.commit()
            
            ventana74.withdraw()
            paz()
        
    def regresar_a():
        if ventana_abierta:
            return
        ventana74.withdraw()
        paz()
        
    global alu
    
    ventana.withdraw()
  
    ventana74=CTk()
    ventana74.config(bg="RosyBrown2")
    ventana74.title("Registro de alumno")
    ventana74.geometry("400x400")
    ventana74.resizable(0,0)
    
    text0=CTkLabel(ventana74,text="",bg_color="RosyBrown2")
    text0.pack(pady="15")
    
    text1=CTkLabel(ventana74,text="Ingrese su nombre",bg_color="RosyBrown2",text_color="Black")
    text1.pack()
    
    alu=CTkEntry(ventana74,bg_color="RosyBrown2")
    alu.pack()
    limitar_entry(alu,28)
    
    text0_1=CTkLabel(ventana74,text="",bg_color="RosyBrown2")
    text0_1.pack()
    
    text2=CTkLabel(ventana74,text="Ingrese su contraseña",bg_color="RosyBrown2",text_color="Black")
    text2.pack()

    con=CTkEntry(ventana74,bg_color="RosyBrown2")
    con.pack()
    limitar_entry_contra(con,30)
    
    text0_2=CTkLabel(ventana74,text="",bg_color="RosyBrown2")
    text0_2.pack()
    
    boton=CTkButton(ventana74,text="Continuar",command=registrar_a,bg_color="RosyBrown2",fg_color=("#DB3E39","#821D1A"))
    boton.pack(pady="25")
    
    boton6=CTkButton(ventana74,text="Regresar",command=regresar_a,bg_color="RosyBrown2",fg_color=("#DB3E39","#821D1A"))
    boton6.pack(pady="10")
    
    ventana74.mainloop()


def paz():
  customtkinter.set_appearance_mode("dark")
  
  global ventana
  
  ventana=CTk()
  ventana.config(bg="RosyBrown3")
  ventana.title("Sistema de calificaciones")

  boton=CTkButton(ventana,text="Iniciar sesion",command=inicio,bg_color="RosyBrown3",fg_color=("#DB3E39","#821D1A"))
  boton.pack(pady="100")

  boton2=CTkButton(ventana,text="Registrar usuario",command=registro,bg_color="RosyBrown3",fg_color=("#DB3E39","#821D1A"))
  boton2.pack(pady="100")
  
  ventana.resizable(0,0)
  ventana.geometry("400x400")
  ventana.mainloop()


if __name__== "__main__":
    paz()
